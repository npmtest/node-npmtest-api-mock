{"/home/travis/build/npmtest/node-npmtest-api-mock/test.js":"/* istanbul instrument in package npmtest_api_mock */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-api-mock/lib.npmtest_api_mock.js":"/* istanbul instrument in package npmtest_api_mock */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_api_mock = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_api_mock = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-api-mock/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-api-mock && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_api_mock */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_api_mock\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_api_mock.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_api_mock.rollup.js'] =\n            local.assetsDict['/assets.npmtest_api_mock.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_api_mock.__dirname + '/lib.npmtest_api_mock.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-api-mock/node_modules/api-mock/lib/api-mock.js":"// Generated by CoffeeScript 1.6.3\nvar ApiMock, CorsSupport, SslSupport, express, fs, protagonist, walker;\n\nfs = require('fs');\n\nprotagonist = require('protagonist');\n\nexpress = require('express');\n\nwalker = require('./walker');\n\nSslSupport = require('./ssl-support');\n\nCorsSupport = require('./cors-support');\n\nApiMock = (function() {\n  function ApiMock(config) {\n    var corsSupport, sslSupport;\n    if (config['protagonist']) {\n      protagonist = config['protagonist'];\n    }\n    if (config['express']) {\n      express = config['express'];\n    }\n    if (config['blueprintPath']) {\n      this.blueprintPath = config['blueprintPath'];\n    }\n    if (this.blueprintPath == null) {\n      throw new Error(\"No blueprint path provided.\");\n    }\n    this.configuration = config;\n    this.app = express();\n    if (this.configuration.options['ssl-enable']) {\n      sslSupport = new SslSupport(this.app, {\n        port: this.configuration.options['ssl-port'],\n        host: this.configuration.options['ssl-host'],\n        cert: this.configuration.options['ssl-cert'],\n        key: this.configuration.options['ssl-key']\n      });\n    }\n    if (!this.configuration.options['cors-disable']) {\n      corsSupport = new CorsSupport(this.app);\n    }\n  }\n\n  ApiMock.prototype.run = function() {\n    var app, ast_json, data, e,\n      _this = this;\n    app = this.app;\n    try {\n      data = fs.readFileSync(this.blueprintPath, 'utf8');\n    } catch (_error) {\n      e = _error;\n      throw e;\n    }\n    ast_json = \"\";\n    return protagonist.parse(data, {\n      type: \"ast\"\n    }, function(error, result) {\n      var _ref, _ref1;\n      if (error != null) {\n        throw error;\n      }\n      ast_json = result.ast;\n      try {\n        walker(app, ast_json['resourceGroups']);\n      } catch (_error) {\n        error = _error;\n        throw error;\n      }\n      try {\n        return app.listen(((_ref = _this.configuration) != null ? (_ref1 = _ref.options) != null ? _ref1.port : void 0 : void 0) != null ? _this.configuration.options.port : 3000);\n      } catch (_error) {\n        error = _error;\n      }\n    });\n  };\n\n  return ApiMock;\n\n})();\n\nmodule.exports = ApiMock;\n","/home/travis/build/npmtest/node-npmtest-api-mock/node_modules/api-mock/bin/api-mock":"#!/usr/bin/env node\nvar optimist = require('optimist');\nvar winston = require('winston');\nvar defaultLogger = winston.defaultLogger;\nvar parsePackageJson = require('../lib/parse-package-json');\nvar path = require('path');\nvar ApiMock = require('../lib/api-mock');\nvar CorsSupport = require('../lib/cors-support');\n\nvar version = parsePackageJson(path.join(__dirname, '../package.json'));\n\nwinston.cli();\n\noptions = {\n  port: {\n    alias: \"p\",\n    description: \"Set which port api-mock should listen on.\\n\",\n    'default': 3000\n  },\n  'ssl-enable': {\n    alias: \"s\",\n    description: \"Enable SSL support.\\n\",\n    'default': false,\n    'boolean': true\n  },\n  'ssl-port': {\n    description: \"Set which port api-mock should listen on for SSL traffic.\\n\",\n    'default': 3080\n  },\n  'ssl-host': {\n    description: \"Set hostname for SSL server.\\n\",\n  },\n  'ssl-cert': {\n    description: \"Set path for SSL certificate file.\\n\",\n    'default': './server.crt'\n  },\n  'ssl-key': {\n    description: \"Set path for SSL key file.\\n\",\n    'default': './server.key'\n  },\n  'cors-disable': {\n    alias: \"c\",\n    description: \"Disable CORS headers.\\n\",\n    'default': false,\n    'boolean': true\n  },\n  color: {\n    alias: \"k\",\n    description: \"Colorize cli output.\\n\",\n    'default': true,\n    'boolean': true\n  },\n  help: {\n    description: \"Show usage information.\\n\"\n  },\n  version: {\n    description: \"Show version number.\\n\"\n  }\n}\n\nvar argv = optimist\n    .usage(\"Usage: \\n  \" + \"api-mock <path to blueprint>  [OPTIONS]\"\n     + \"\\n\\nExample: \\n  \" + \"api-mock ./apiary.md --port 3000\")\n    .options(options)\n    .wrap(80)\n    .argv;\n\n\nwinston.default.transports.console.colorize = argv.color;\n\nif (argv.help == true) {\n  optimist.showHelp(fn=console.log);\n  process.exit(0);\n}\n\nif (argv.version == true) {\n  console.log(version);\n  process.exit(0);\n}\n\nif (argv._[0] == undefined) {\n  winston.error(\"Must specify path to blueprint file.\\n\");\n  optimist.showHelp(fn=console.log);\n  process.exit(1);\n}\n\nconfiguration = {\n  'blueprintPath': argv._[0],\n  'options': argv\n}\n\nprocess.on( 'SIGINT', function() {\n  process.exit(0);\n});\n\nprocess.on('uncaughtException', function(err) {\n    if(err.errno === 'EADDRINUSE') {\n         winston.error('The specified port is being used by another process. Specify a different port with -p.');\n    } else {\n         winston.error(err + '\\n' + err.stack);\n    }\n    process.exit(1);\n});\n\ntry {\n  apiMock = new ApiMock(configuration);\n  apiMock.run();\n  winston.info('Listening on port ' + configuration.options.port)\n} catch(e) {\n  winston.error(e + '\\n' + e.stack);\n  process.exit(1);\n}\n","/home/travis/build/npmtest/node-npmtest-api-mock/node_modules/api-mock/lib/cors-support.js":"// Generated by CoffeeScript 1.6.3\nvar CorsSupport, winston;\n\nwinston = require('winston');\n\nCorsSupport = (function() {\n  function CorsSupport(app) {\n    var options;\n    options = {\n      origin: '*',\n      methods: 'GET, PUT, POST, PATCH, DELETE, TRACE, OPTIONS',\n      headers: 'Origin, X-Requested-With, Content-Type, Accept, Authorization, Referer, Prefer'\n    };\n    app.all('*', function(req, res, next) {\n      if (!req.get('Origin')) {\n        return next();\n      } else {\n        res.set('Access-Control-Allow-Origin', options.origin);\n        res.set('Access-Control-Allow-Methods', options.methods);\n        res.set('Access-Control-Allow-Headers', options.headers);\n        if ('OPTIONS' === req.method) {\n          return res.send(200);\n        } else {\n          return next();\n        }\n      }\n    });\n    winston.info(\"Enabled Cross-Origin-Resource-Sharing (CORS)\");\n    winston.info(\"\\tAllow-Origin: \" + options.origin);\n    winston.info(\"\\tAllow-Methods: \" + options.methods);\n    winston.info(\"\\tAllow-Headers: \" + options.headers);\n  }\n\n  return CorsSupport;\n\n})();\n\nmodule.exports = CorsSupport;\n","/home/travis/build/npmtest/node-npmtest-api-mock/node_modules/api-mock/lib/expand-uri-template-with-parameters.js":"// Generated by CoffeeScript 1.6.3\nvar expandUriTemplateWithParameters, ut;\n\nut = require('uri-template');\n\nexpandUriTemplateWithParameters = function(uriTemplate, parameters) {\n  var ambigous, e, expression, param, parameter, parsed, result, text, toExpand, uriParameter, uriParameters, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2;\n  result = {\n    errors: [],\n    warnings: [],\n    uri: null\n  };\n  try {\n    parsed = ut.parse(uriTemplate);\n  } catch (_error) {\n    e = _error;\n    text = 'Failed to parse URI template';\n    result['errors'].push(text);\n    return result;\n  }\n  uriParameters = [];\n  _ref = parsed['expressions'];\n  for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n    expression = _ref[_i];\n    _ref1 = expression['params'];\n    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n      param = _ref1[_j];\n      uriParameters.push(param['name']);\n    }\n  }\n  _ref2 = Object.keys(parameters);\n  for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\n    parameter = _ref2[_k];\n    if (uriParameters.indexOf(parameter) === -1) {\n      text = \"URI template doesn\\'t contain expression for parameter\" + \" '\" + parameter + \"'\";\n      result['warnings'].push(text);\n    }\n  }\n  if (parsed['expressions'].length === 0) {\n    result['uri'] = uriTemplate;\n  } else {\n    ambigous = false;\n    for (_l = 0, _len3 = uriParameters.length; _l < _len3; _l++) {\n      uriParameter = uriParameters[_l];\n      if (Object.keys(parameters).indexOf(uriParameter) === -1) {\n        ambigous = true;\n        text = \"Ambigous URI template. \" + \"Parameter not defined:\" + \"'\" + uriParameter + \"'\";\n        result['warnings'].push(text);\n      }\n    }\n    if (ambigous === false) {\n      toExpand = {};\n      for (_m = 0, _len4 = uriParameters.length; _m < _len4; _m++) {\n        uriParameter = uriParameters[_m];\n        param = parameters[uriParameter];\n        if (param['required'] === true) {\n          if (param['example'] === void 0) {\n            ambigous = true;\n            text = \"Ambigous URI template. \" + \"No example value for parameter:\" + \"'\" + uriParameter + \"'\";\n            result['warnings'].push(text);\n          } else {\n            toExpand[uriParameter] = param['example'];\n          }\n        } else {\n          if (param['example'] !== void 0) {\n            toExpand[uriParameter] = param['example'];\n          } else if (param['default'] !== void 0) {\n            toExpand[uriParameter] = param['default'];\n          }\n        }\n      }\n    }\n    if (ambigous === false) {\n      result['uri'] = parsed.expand(toExpand);\n    }\n  }\n  return result;\n};\n\nmodule.exports = expandUriTemplateWithParameters;\n","/home/travis/build/npmtest/node-npmtest-api-mock/node_modules/api-mock/lib/inherit-headers.js":"// Generated by CoffeeScript 1.6.3\nvar inheritHeaders;\n\ninheritHeaders = function(actualHeaders, inheritingHeaders) {\n  var name, params;\n  for (name in inheritingHeaders) {\n    params = inheritingHeaders[name];\n    if (actualHeaders[name] === void 0) {\n      actualHeaders[name] = params;\n    }\n  }\n  return actualHeaders;\n};\n\nmodule.exports = inheritHeaders;\n","/home/travis/build/npmtest/node-npmtest-api-mock/node_modules/api-mock/lib/inherit-parameters.js":"// Generated by CoffeeScript 1.6.3\nvar inheritParameters;\n\ninheritParameters = function(actualParameters, inheritingParameters) {\n  var name, params;\n  for (name in inheritingParameters) {\n    params = inheritingParameters[name];\n    if (actualParameters[name] === void 0) {\n      actualParameters[name] = params;\n    }\n  }\n  return actualParameters;\n};\n\nmodule.exports = inheritParameters;\n","/home/travis/build/npmtest/node-npmtest-api-mock/node_modules/api-mock/lib/parse-package-json.js":"// Generated by CoffeeScript 1.6.3\nvar fs, parsePackageJson;\n\nfs = require('fs');\n\nparsePackageJson = function(path) {\n  var packagejson;\n  packagejson = JSON.parse(fs.readFileSync(path, \"utf8\"));\n  return packagejson.name + \" v\" + packagejson.version;\n};\n\nmodule.exports = parsePackageJson;\n","/home/travis/build/npmtest/node-npmtest-api-mock/node_modules/api-mock/lib/ssl-support.js":"// Generated by CoffeeScript 1.6.3\nvar SslSupport, fs, https, winston;\n\nhttps = require('https');\n\nfs = require('fs');\n\nwinston = require('winston');\n\nSslSupport = (function() {\n  function SslSupport(app, options) {\n    var serverOptions;\n    serverOptions = {\n      key: fs.readFileSync(options.key),\n      cert: fs.readFileSync(options.cert)\n    };\n    https.createServer(serverOptions, app).listen(options.port, options.host);\n    winston.info('Listening on ' + options.host + ':' + options.port + ' (HTTPS)');\n  }\n\n  return SslSupport;\n\n})();\n\nmodule.exports = SslSupport;\n","/home/travis/build/npmtest/node-npmtest-api-mock/node_modules/api-mock/lib/walker.js":"// Generated by CoffeeScript 1.6.3\nvar exampleToHttpPayloadPair, expandUriTemplateWithParameters, inheritHeaders, inheritParameters, ut, walker, winston;\n\ninheritHeaders = require('./inherit-headers');\n\ninheritParameters = require('./inherit-parameters');\n\nexpandUriTemplateWithParameters = require('./expand-uri-template-with-parameters');\n\nexampleToHttpPayloadPair = require('./example-to-http-payload-pair');\n\nut = require('uri-template');\n\nwinston = require('winston');\n\nwalker = function(app, resourceGroups) {\n  var action, error, example, group, path, payload, resource, response, responses, sendResponse, warning, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _m, _n, _o, _ref, _ref1, _ref2, _ref3, _ref4, _results;\n  sendResponse = function(responses) {\n    return function(req, res) {\n      var header, headerName, headerValue, response, value, _ref;\n      response = responses[Object.keys(responses)[0]];\n      if ('prefer' in req.headers) {\n        if (req.headers['prefer'] in responses) {\n          response = responses[req.headers['prefer']];\n        } else {\n          winston.warn(\"[\" + req.url + \"] Preferrered response \" + req.headers['prefer'] + \" not found. Falling back to \" + response.status);\n        }\n      }\n      _ref = response.headers;\n      for (header in _ref) {\n        value = _ref[header];\n        headerName = value['name'];\n        headerValue = value['value'];\n        res.setHeader(headerName, headerValue);\n      }\n      res.setHeader('Content-Length', Buffer.byteLength(response.body));\n      return res.send(response.status, response.body);\n    };\n  };\n  responses = [];\n  for (_i = 0, _len = resourceGroups.length; _i < _len; _i++) {\n    group = resourceGroups[_i];\n    _ref = group['resources'];\n    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {\n      resource = _ref[_j];\n      _ref1 = resource['actions'];\n      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {\n        action = _ref1[_k];\n        action['headers'] = inheritHeaders(action['headers'], resource['headers']);\n        action['parameters'] = inheritParameters(action['parameters'], resource['parameters']);\n        if (resource['uriTemplate'] != null) {\n          path = resource['uriTemplate'].split('{?')[0].replace(new RegExp(\"}\", \"g\"), \"\").replace(new RegExp(\"{\", \"g\"), \":\");\n          _ref2 = action['examples'];\n          for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {\n            example = _ref2[_l];\n            payload = exampleToHttpPayloadPair(example, action['headers']);\n            _ref3 = payload['warnings'];\n            for (_m = 0, _len4 = _ref3.length; _m < _len4; _m++) {\n              warning = _ref3[_m];\n              winston.warn(\"[\" + path + \"] \" + warning);\n            }\n            _ref4 = payload['errors'];\n            for (_n = 0, _len5 = _ref4.length; _n < _len5; _n++) {\n              error = _ref4[_n];\n              winston.error(\"[\" + path + \"] \" + error);\n            }\n            responses.push({\n              method: action.method,\n              path: path,\n              responses: payload['pair']['responses']\n            });\n          }\n        }\n      }\n    }\n  }\n  responses.sort(function(a, b) {\n    if (a.path > b.path) {\n      return -1;\n    }\n    if (a.path < b.path) {\n      return 1;\n    }\n    return 0;\n  });\n  _results = [];\n  for (_o = 0, _len6 = responses.length; _o < _len6; _o++) {\n    response = responses[_o];\n    switch (response.method) {\n      case 'GET':\n        _results.push(app.get(response.path, sendResponse(response.responses)));\n        break;\n      case 'POST':\n        _results.push(app.post(response.path, sendResponse(response.responses)));\n        break;\n      case 'PUT':\n        _results.push(app.put(response.path, sendResponse(response.responses)));\n        break;\n      case 'DELETE':\n        _results.push(app[\"delete\"](response.path, sendResponse(response.responses)));\n        break;\n      case 'PATCH':\n        _results.push(app.patch(response.path, sendResponse(response.responses)));\n        break;\n      default:\n        _results.push(void 0);\n    }\n  }\n  return _results;\n};\n\nmodule.exports = walker;\n","/home/travis/build/npmtest/node-npmtest-api-mock/node_modules/api-mock/lib/example-to-http-payload-pair.js":"// Generated by CoffeeScript 1.6.3\nvar exampleToHttpPayloadPair, inheritHeaders;\n\ninheritHeaders = require('./inherit-headers');\n\nexampleToHttpPayloadPair = function(example, inheritingHeaders) {\n  var request, response, responses, result, selectedRequest, selectedResponse, text, _i, _len, _ref;\n  if (inheritingHeaders == null) {\n    inheritingHeaders = {};\n  }\n  result = {\n    warnings: [],\n    errors: [],\n    pair: {}\n  };\n  request = {};\n  responses = {};\n  if (example['requests'].length > 1) {\n    text = \"Multiple requests, using first.\";\n    result['warnings'].push(text);\n  }\n  if (example['responses'].length === 0) {\n    text = \"No response available. Can't create HTTP transaction.\";\n    result['warnings'].push(text);\n  } else {\n    selectedRequest = example['requests'][0];\n    if (example['requests'].length === 0) {\n      selectedRequest = {\n        body: \"\",\n        headers: {}\n      };\n    }\n    request['body'] = selectedRequest['body'];\n    request['headers'] = inheritHeaders(selectedRequest['headers'], inheritingHeaders);\n    _ref = example['responses'];\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      selectedResponse = _ref[_i];\n      response = {};\n      response['body'] = selectedResponse['body'];\n      response['headers'] = inheritHeaders(selectedResponse['headers'], inheritingHeaders);\n      response['status'] = selectedResponse['name'];\n      if (selectedResponse['schema'] !== \"\") {\n        response['schema'] = selectedResponse['schema'];\n      }\n      responses[response['status']] = response;\n    }\n    result['pair']['request'] = request;\n    result['pair']['responses'] = responses;\n  }\n  return result;\n};\n\nmodule.exports = exampleToHttpPayloadPair;\n"}